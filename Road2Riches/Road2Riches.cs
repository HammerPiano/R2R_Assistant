
using CSVAttributes = CsvHelper.Configuration.Attributes;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using System.Threading;

namespace Road2Riches
{
	public class VoiceAttackPlugin
	{
		
		public static Guid VA_Id()
		{
			return new Guid("{ee6641f1-5c4c-4347-95f1-60b6ec093beb}");  //this id must be generated by YOU... it must be unique so VoiceAttack can identify and use the plugin
		}
		public static string VA_DisplayName()
		{
			return "Road 2 riches V1.0.0 - Made by HammerPiano";
		}
		static List<List<ScanEntry>> Scans = new List<List<ScanEntry>>();

		/*
		 * Replacing the planet letters with the NATO alphabet names, just for fun
		 */
		static Dictionary<String, String> NATO = new Dictionary<String, String>()
		{
			{"A", "Alpha"},
			{"B", "Bravo"},
			{"C", "Charlie"},
			{"D", "Delta"},
			{"E", "Echo"},
			{"F", "Foxtrot"},
			{"G", "Golf"},
			{"H", "Hotel"},
			{"I", "India"},
			{"J", "Juliett"},
			{"K", "Kilo"},
			{"L", "Lima"},
			{"M", "Mike"},
			{"N", "November"},
			{"O", "Oscar"},
			{"P", "Papa"},
			{"Q", "Quebec"},
			{"R", "Romeo"},
			{"S", "Sierra"},
			{"T", "Tango"},
			{"U", "Uniform"},
			{"V", "Victor"},
			{"W", "Whiskey"},
			{"X", "X-ray"},
			{"Y", "Yankee"},
			{"Z", "Zulu"}
		};
		//tracking variables for the journey
		static String CurrSystem = "";
		static int CurrIndex = 0;
		public static string VA_DisplayInfo()
		{
			return "Road 2 riches assistant";
		}

		public static void VA_Exit1(dynamic vaProxy)
		{

		}

		public static void VA_StopCommand()
		{

		}

		//initializating variable, and checking if the say command exists
		public static void VA_Init1(dynamic vaProxy)
		{
			vaProxy.SetText("r2r_sayData", "Nothing to say");
			if (!vaProxy.CommandExists("r2r_say"))
			{
				vaProxy.WriteToLog("Please add command, r2r_say, that says whatever in variable r2r_sayData (TXT)");
			}

		}

		public static void VA_Invoke1(dynamic vaProxy)
		{
			switch (vaProxy.Context)
			{
				//init
				case "r2r_init":
					InitData(vaProxy);
					break;

				//start the expedition
				case "r2r_start":
					CurrIndex = 0;
					HandleSystem(vaProxy,0);
					break;

				//next system
				case "r2r_next_system":
					CurrIndex++;
					HandleSystem(vaProxy, CurrIndex);
					break;

				case "r2r_stop":
					Stop(vaProxy);
					break;

				case "r2r_repeat_planets":
					ListPlanets(vaProxy);
					break;

				default:
					vaProxy.WriteToLog("Error - no context", "red");
					return;
			}

			if (vaProxy.CommandExists("r2r_say"))
			{
				vaProxy.ExecuteCommand("r2r_say");
			}

		}
		/* 
		 * function will init Scans data from the CSV filepath saved in the variable path
		 */
		public static void InitData(dynamic vaProxy)
		{
			try
			{
				var path = vaProxy.GetText("path");
				vaProxy.WriteToLog(path, "green");
				var tempList = new List<ScanEntry>();
				using (var reader = new StreamReader(path))
				using (var csv = new CsvHelper.CsvReader(reader))
				{
					while (csv.Read())
					{
						var body = csv.GetRecord<ScanEntry>();
						body.Body = NATO.Aggregate(body.Body.Replace(body.System, ""), (current, value) => current.Replace(value.Key, value.Value));
						vaProxy.WriteToLog(body.ToString());
						//first system?
						if (CurrSystem == "")
						{
							CurrSystem = body.System;
							tempList.Add(body);
						}
						//multiple planets
						else if (CurrSystem == body.System)
						{
							tempList.Add(body);
						}
						//next system
						else
						{
							//update system
							CurrSystem = body.System;
							Scans.Add(tempList);
							tempList = new List<ScanEntry>();
							tempList.Add(body);
						}
					}
					//add last record
					if (tempList[0].System == Scans[Scans.Count - 1][0].System)
					{
						Scans[Scans.Count - 1].Add(tempList[0]);
					}
					else
					{
						Scans.Add(tempList);
					}
					CurrIndex = 0;
				}
				vaProxy.SetText("r2r_sayData", "Initialization complete");
				vaProxy.WriteToLog(String.Format("{0} systems to scan", Scans.Count), "blue");
			}
			catch (Exception e)
			{
				vaProxy.WriteToLog("Error - init" + e.ToString(), "red");
				return;
			}
		}

		/*
		 * function will copy string to clipboard
		 */
		public static void CopyToClipboard(string str)
		{
			var t = new Thread((ThreadStart)(() => { Clipboard.SetText(str); }));
			t.SetApartmentState(ApartmentState.STA);
			t.Start();
			t.Join();
		}

		/*
		 * function will handle return data about scans of a system
		 * gets a system index
		 */
		public static void HandleSystem(dynamic vaProxy, int index)
		{
			//we will always have a body, index 0
			if(index >= Scans.Count)
			{
				vaProxy.SetText("r2r_sayData", "Expedition complete! Well done commander");
				Scans = new List<List<ScanEntry>>();
				CurrIndex = 0;
				CurrSystem = "";
				return;
			}
			CurrSystem = Scans[index][0].System;
			string temp = "";
			foreach (var scan in Scans[CurrIndex])
			{
				temp += scan.Body;
			}
			if(index == (Scans.Count - 1))
			{
				temp += ". This is the last system we scan.";
			}
			vaProxy.SetText("r2r_sayData", "We are going to " + CurrSystem + ", and to visit planets " + temp);
			CopyToClipboard(CurrSystem);
		}

		/*
		 * function will abort the expedition
		 */
		public static void Stop(dynamic vaProxy)
		{
			CurrSystem = "";
			CurrIndex = 0;
			Scans = new List<List<ScanEntry>>();
			vaProxy.SetText("r2r_sayData", "Expedition aborted");
		}

		/*
		 * function will list the planets to scan in a system
		 */
		public static void ListPlanets(dynamic vaProxy)
		{
			string temp = "";
			foreach (var scan in Scans[CurrIndex])
			{
				temp += scan.Body;
			}
			vaProxy.SetText("r2r_sayData", "We need to scan planets " + temp);
		}
	}

	/*
	 * Provide CSV with all scans needed
	 * Each entry is a planet to scan
	 * System - system of planet
	 * Body - Which planet to scan
	 * Type - High metal, Gas giant...
	 * Terraformable - is terraformable
	 * Distance - Distance in LS from arrival point
	 * FSS/DSS value - estimated scan value
	 * Jumps - number of jumps to body
	 */
	public class ScanEntry
	{
		[CSVAttributes.Name("System Name")]
		public string System{get; set;}

		[CSVAttributes.Name("Body Name")]
		public string Body{get; set;}

		[CSVAttributes.Name("Body Subtype")]
		public string Type{get; set;}

		[CSVAttributes.Name("Is Terraformable")]
		[CSVAttributes.BooleanTrueValues("Yes")]
		[CSVAttributes.BooleanFalseValues("No")]
		public bool Terraformable{get; set;}

		[CSVAttributes.Name("Distance To Arrival")]
		public int Distance{get; set;}

		[CSVAttributes.Name("Estimated Scan Value")]
		public int FSSValue{get; set;}

		[CSVAttributes.Name("Estimated Mapping Value")]
		public int DSSValue{get; set;}

		[CSVAttributes.Name("Jumps")]
		public int Jumps{get; set;}

		public override string ToString()
		{
			return System + Body;
		}
	}
}
