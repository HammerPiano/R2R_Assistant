
using CSVAttributes = CsvHelper.Configuration.Attributes;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;

namespace Road2Riches
{
	public class VoiceAttackPlugin
	{
		//copy functions
		[DllImport("user32.dll")]
		internal static extern bool OpenClipboard(IntPtr hWndNewOwner);

		[DllImport("user32.dll")]
		internal static extern bool CloseClipboard();

		[DllImport("user32.dll")]
		internal static extern bool SetClipboardData(uint uFormat, IntPtr data);
		public static Guid VA_Id()
		{
			return new Guid("{ee6641f1-5c4c-4347-95f1-60b6ec093beb}");  //this id must be generated by YOU... it must be unique so VoiceAttack can identify and use the plugin
		}
		public static string VA_DisplayName()
		{
			return "Road 2 riches V0.1.0 - Made by HammerPiano";
		}
		static List<List<ScanEntry>> Scans = new List<List<ScanEntry>>();

		/*
		 * Replacing the planet letters with the NATO alphabet names, just for fun
		 */
		static Dictionary<String, String> NATO = new Dictionary<String, String>()
		{
			{"A", "Alpha"},
			{"B", "Bravo"},
			{"C", "Charlie"},
			{"D", "Delta"},
			{"E", "Echo"},
			{"F", "Foxtrot"},
			{"G", "Golf"},
			{"H", "Hotel"},
			{"I", "India"},
			{"J", "Juliett"},
			{"K", "Kilo"},
			{"L", "Lima"},
			{"M", "Mike"},
			{"N", "November"},
			{"O", "Oscar"},
			{"P", "Papa"},
			{"Q", "Quebec"},
			{"R", "Romeo"},
			{"S", "Sierra"},
			{"T", "Tango"},
			{"U", "Uniform"},
			{"V", "Victor"},
			{"W", "Whiskey"},
			{"X", "X-ray"},
			{"Y", "Yankee"},
			{"Z", "Zulu"}
		};
		//tracking variables for the journey
		static String CurrSystem = "";
		static int CurrIndex = 0;
		public static string VA_DisplayInfo()
		{
			return "Road 2 riches assistant";
		}

		public static void VA_Exit1(dynamic vaProxy)
		{

		}

		public static void VA_StopCommand()
		{

		}

		//initializating variable, and checking if the say command exists
		public static void VA_Init1(dynamic vaProxy)
		{
			vaProxy.SetText("r2r_sayData", "Nothing to say");
			if (!vaProxy.CommandExists("r2r_say"))
			{
				vaProxy.WriteToLog("Please add command, r2r_say, that says whatever in variable r2r_sayData (TXT)");
			}

		}
		
		//[STAThread]
		public static void VA_Invoke1(dynamic vaProxy)
		{
			
			//try
			//{
				switch (vaProxy.Context)
				{
					//init
					case "r2r_init":
						try
						{
							var path = vaProxy.GetText("path");
							vaProxy.WriteToLog(path, "green");
							var tempList = new List<ScanEntry>();
							using (var reader = new StreamReader(path))
							using (var csv = new CsvHelper.CsvReader(reader))
							{
								while (csv.Read())
								{
									var body = csv.GetRecord<ScanEntry>();
									body.Body = NATO.Aggregate(body.Body.Replace(body.System, ""), (current, value) => current.Replace(value.Key, value.Value));

									//first system?
									if (CurrSystem == "")
									{
										CurrSystem = body.System;
										tempList.Add(body);
									}
									//multiple planets
									else if (CurrSystem == body.System)
									{
										tempList.Add(body);
									}
									//next system
									else
									{
										//update system
										CurrSystem = body.System;
										Scans.Add(tempList);
										tempList = new List<ScanEntry>();
										tempList.Add(body);
									}
								}
								CurrIndex = 0;
							}
							vaProxy.SetText("r2r_sayData", "Initialization complete");
							vaProxy.WriteToLog(String.Format("{0} systems to scan", Scans.Count), "blue");
						}
						catch (Exception e)
						{
							vaProxy.WriteToLog("Error - init" + e.ToString(), "red");
							return;
						}
						break;

					//start the expedition
					case "r2r_start":
						//first system
						vaProxy.WriteToLog(Scans[0].Count.ToString(), "yellow");
						CurrSystem = Scans[0][0].System;
						CurrIndex = 0;
						AddToClipboard(CurrSystem);
						String temp = "";
						//listing planets
						foreach (var scan in Scans[0])
						{
							temp += scan.Body;
						}
						vaProxy.SetText("r2r_sayData", "We are going to " + CurrSystem + ", and to visit planets " + temp);
						break;

					//next system
					case "r2r_next_system":
						CurrIndex++;
						if(CurrIndex >= Scans.Count)
						{
							vaProxy.SetText("r2r_sayData", "Expedition complete! Well done commander");
							Scans = new List<List<ScanEntry>>();
							CurrIndex = 0;
							CurrSystem = "";
							break;
						}
						CurrSystem = Scans[CurrIndex][0].System;
						temp = "";
						foreach (var scan in Scans[CurrIndex])
						{
							temp += scan.Body;
						}
						vaProxy.SetText("r2r_sayData", "We are going to " + CurrSystem + ", and to visit planets " + temp);
						AddToClipboard(CurrSystem);
						break;

					case "r2r_stop":
						CurrSystem = "";
						CurrIndex = 0;
						Scans = new List<List<ScanEntry>>();
						vaProxy.SetText("r2r_sayData", "Expedition aborted");
						break;

					case "r2r_repeat_planets":
						temp = "";
						foreach (var scan in Scans[CurrIndex])
						{
							temp += scan.Body;
						}
						vaProxy.SetText("r2r_sayData", "We need to scan planets " + temp);
						break;

					default:
						vaProxy.WriteToLog("Error - no context", "red");
						return;
				}
			//}
			//catch (Exception e)
			//{
			//	vaProxy.WriteToLog(e.ToString(), "black");
			//	string logPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + ".log";
			//	if (!File.Exists(logPath))
			//	{
			//		using (StreamWriter sw = File.CreateText(logPath))
			//		{
			//			sw.WriteLine(e.ToString());
			//		}
			//}
			//	else
			//	{
			//		using (StreamWriter sw = File.AppendText(logPath))
			//		{
			//			sw.WriteLine(e.ToString());
			//		}
			//	}
			//}
			//say
			if (vaProxy.CommandExists("r2r_say"))
			{
				vaProxy.ExecuteCommand("r2r_say");
			}

		}

		public static void AddToClipboard(String str)
		{
			//https://stackoverflow.com/questions/13571426/how-can-i-copy-a-string-to-the-clipboard-within-my-console-application-without-a/13571530#13571530
			OpenClipboard(IntPtr.Zero);
			var ptr = Marshal.StringToHGlobalUni(str);
			SetClipboardData(13, ptr);
			CloseClipboard();
			Marshal.FreeHGlobal(ptr);
		}
	}

	/*
	 * Provide CSV with all scans needed
	 * Each entry is a planet to scan
	 * System - system of planet
	 * Body - Which planet to scan
	 * Type - High metal, Gas giant...
	 * Terraformable - is terraformable
	 * Distance - Distance in LS from arrival point
	 * FSS/DSS value - estimated scan value
	 * Jumps - number of jumps to body
	 */
	public class ScanEntry
	{
		[CSVAttributes.Name("System Name")]
		public string System{get; set;}

		[CSVAttributes.Name("Body Name")]
		public string Body{get; set;}

		[CSVAttributes.Name("Body Subtype")]
		public string Type{get; set;}

		[CSVAttributes.Name("Is Terraformable")]
		[CSVAttributes.BooleanTrueValues("Yes")]
		[CSVAttributes.BooleanFalseValues("No")]
		public bool Terraformable{get; set;}

		[CSVAttributes.Name("Distance To Arrival")]
		public int Distance{get; set;}

		[CSVAttributes.Name("Estimated Scan Value")]
		public int FSSValue{get; set;}

		[CSVAttributes.Name("Estimated Mapping Value")]
		public int DSSValue{get; set;}

		[CSVAttributes.Name("Jumps")]
		public int Jumps{get; set;}

		public override string ToString()
		{
			return System + Body;
		}
	}
}
